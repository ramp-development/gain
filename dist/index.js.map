{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/breakpoints.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/getCurrentBreakpoint.js", "../src/components/scrollPanel.ts", "../src/components/team.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Defines the default media queries for Webflow's breakpoints.\n */\nexport const WEBFLOW_BREAKPOINTS = new Map([\n    ['tiny', '(max-width: 479px)'],\n    ['small', '(max-width: 767px)'],\n    ['medium', '(max-width: 991px)'],\n    ['main', '(min-width: 992px)'],\n]);\n", "import { WEBFLOW_BREAKPOINTS } from './breakpoints';\n/**\n * Checks the current breakpoint based on the window media.\n *\n * @returns A {@link WebflowBreakpoint} string.\n */\nexport const getCurrentBreakpoint = () => {\n    for (const [breakpoint, mediaQuery] of WEBFLOW_BREAKPOINTS) {\n        if (window.matchMedia(mediaQuery).matches) {\n            return breakpoint;\n        }\n    }\n    return 'main';\n};\n", "import { getCurrentBreakpoint } from '@finsweet/ts-utils';\n\nexport const scrollPanel = (): void => {\n  const panels = document.querySelectorAll<HTMLElement>('.scroll_panel');\n  handlePanels(panels);\n  window.addEventListener('resize', () => {\n    handlePanels(panels);\n  });\n\n  function handlePanels(panels: NodeListOf<HTMLElement>): void {\n    const breakpoint = getCurrentBreakpoint();\n    const { innerHeight } = window;\n\n    [...panels].forEach((panel) => {\n      if (breakpoint !== 'main') {\n        panel.style.removeProperty('top');\n        return;\n      }\n\n      const height = panel.offsetHeight;\n      panel.style.top = `${innerHeight - height}px`;\n    });\n  }\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* global document, console */\n\ndeclare const gsap: any;\n\nexport const team = (): void => {\n  const nav = document.querySelector<HTMLElement>('.nav_component');\n\n  const attrKey = 'data-team';\n  const attrKeyImage = 'data-team-image';\n  const attrValues = {\n    item: 'item',\n    popup: 'popup',\n    popupTrigger: 'popup-trigger',\n    popupClose: 'popup-close',\n    imageStart: 'start',\n    imageEnd: 'end',\n  };\n\n  const items = document.querySelectorAll(`[${attrKey}=${attrValues.item}]`);\n\n  [...items].forEach((item) => {\n    const popup = item.querySelector(`[${attrKey}=${attrValues.popup}]`) as HTMLElement;\n    const popupTriggers = item.querySelectorAll(`[${attrKey}=${attrValues.popupTrigger}]`);\n    const popupClose = item.querySelector(`[${attrKey}=${attrValues.popupClose}]`) as HTMLElement;\n\n    const startContainer = item.querySelector(\n      `[${attrKeyImage}=${attrValues.imageStart}]`\n    ) as HTMLElement;\n    const endContainer = item.querySelector(\n      `[${attrKeyImage}=${attrValues.imageEnd}]`\n    ) as HTMLElement;\n\n    // Get the actual image element from the start container\n    const image = startContainer?.querySelector('img') as HTMLImageElement;\n\n    if (\n      !popup ||\n      !popupTriggers.length ||\n      !popupClose ||\n      !startContainer ||\n      !endContainer ||\n      !image\n    ) {\n      return;\n    }\n\n    let isAnimating = false;\n\n    popupTriggers.forEach((trigger) => {\n      trigger.addEventListener('click', () => {\n        if (isAnimating) return;\n        isAnimating = true;\n\n        try {\n          // Get the bounds of the image in its current position\n          const startBounds = image.getBoundingClientRect();\n\n          // Prevent body scrolling\n          document.body.style.overflow = 'hidden';\n\n          // Show popup with opacity 0 to calculate end position\n          popup.style.display = 'flex';\n          popup.style.opacity = '0';\n\n          // Get the bounds of where the image should end up\n          const endBounds = endContainer.getBoundingClientRect();\n\n          // Create a clone of the image for animation\n          const clone = image.cloneNode(true) as HTMLImageElement;\n\n          // Reset clone styles and position at start position\n          clone.style.cssText = '';\n          clone.style.position = 'fixed';\n          clone.style.left = startBounds.left + 'px';\n          clone.style.top = startBounds.top + 'px';\n          clone.style.width = startBounds.width + 'px';\n          clone.style.height = startBounds.height + 'px';\n          clone.style.zIndex = '9999';\n          clone.style.margin = '0';\n          clone.style.padding = '0';\n          clone.style.transform = 'none';\n          clone.style.objectFit = 'cover';\n          document.body.appendChild(clone);\n\n          // Hide original image\n          image.style.opacity = '0';\n\n          // Move the actual image to the end container and set it to fill\n          endContainer.appendChild(image);\n          image.style.opacity = '1';\n          image.style.visibility = 'hidden';\n          image.style.width = '100%';\n          image.style.height = '100%';\n          image.style.objectFit = 'cover';\n\n          // Create timeline for coordinated animations\n          const tl = gsap.timeline();\n\n          // Animate popup opacity from 0 to 1\n          tl.to(\n            popup,\n            {\n              opacity: 1,\n              duration: 0.8,\n              ease: 'power2.inOut',\n            },\n            0\n          );\n\n          // Animate nav opacity from 1 to 0\n          if (nav) {\n            tl.to(\n              nav,\n              {\n                opacity: 0,\n                duration: 0.8,\n                ease: 'power2.inOut',\n                onComplete: () => {\n                  nav.style.display = 'none';\n                },\n              },\n              0\n            );\n          }\n\n          // Animate clone to end position\n          tl.fromTo(\n            clone,\n            {\n              // Starting position (grid position)\n              left: startBounds.left,\n              top: startBounds.top,\n              width: startBounds.width,\n              height: startBounds.height,\n            },\n            {\n              // Ending position (popup position)\n              duration: 0.8,\n              left: endBounds.left,\n              top: endBounds.top,\n              width: endBounds.width,\n              height: endBounds.height,\n              ease: 'power2.inOut',\n              onComplete: () => {\n                // Remove clone and show actual image\n                clone.remove();\n                image.style.visibility = 'visible';\n                isAnimating = false;\n              },\n            },\n            0 // Start at the same time as popup fade\n          );\n        } catch (error) {\n          console.error('Error during opening animation:', error);\n          isAnimating = false;\n          popup.style.display = 'flex';\n          popup.style.opacity = '1';\n          // Ensure body overflow is set even on error\n          document.body.style.overflow = 'hidden';\n        }\n      });\n    });\n\n    popupClose.addEventListener('click', () => {\n      if (isAnimating) return;\n      isAnimating = true;\n\n      try {\n        // The image should now be in the endContainer\n        const currentImage = endContainer.querySelector('img') as HTMLImageElement;\n        if (!currentImage) {\n          popup.style.display = 'none';\n          isAnimating = false;\n          return;\n        }\n\n        // Get bounds BEFORE hiding anything\n        const endBounds = currentImage.getBoundingClientRect();\n        const startBounds = startContainer.getBoundingClientRect();\n\n        // Create clone for animation\n        const clone = currentImage.cloneNode(true) as HTMLImageElement;\n        clone.style.cssText = '';\n        clone.style.position = 'fixed';\n        clone.style.zIndex = '9999';\n        clone.style.pointerEvents = 'none';\n        clone.style.margin = '0';\n        clone.style.padding = '0';\n        clone.style.transform = 'none';\n        clone.style.objectFit = 'cover';\n        document.body.appendChild(clone);\n\n        // Hide image but keep popup visible for fade animation\n        currentImage.style.visibility = 'hidden';\n\n        // Move the actual image back to start container and reset size\n        startContainer.appendChild(currentImage);\n        currentImage.style.width = '';\n        currentImage.style.height = '';\n        currentImage.style.objectFit = '';\n\n        // Create timeline for coordinated animations\n        const tl = gsap.timeline({\n          onComplete: () => {\n            clone.remove();\n            currentImage.style.visibility = 'visible';\n            currentImage.style.opacity = '1';\n            popup.style.display = 'none';\n            // Re-enable body scrolling after animation completes\n            document.body.style.overflow = '';\n            isAnimating = false;\n          },\n        });\n\n        // Animate popup opacity from 1 to 0\n        tl.to(\n          popup,\n          {\n            opacity: 0,\n            duration: 0.8,\n            ease: 'power2.inOut',\n          },\n          0\n        );\n\n        // Animate nav opacity from 0 to 1\n        if (nav) {\n          tl.to(\n            nav,\n            {\n              onStart: () => {\n                nav.style.removeProperty('display');\n              },\n              opacity: 1,\n              duration: 0.8,\n              ease: 'power2.inOut',\n            },\n            0\n          );\n        }\n\n        // Animate clone back to start position\n        tl.fromTo(\n          clone,\n          {\n            // Starting position (popup position)\n            left: endBounds.left,\n            top: endBounds.top,\n            width: endBounds.width,\n            height: endBounds.height,\n          },\n          {\n            // Ending position (grid position)\n            duration: 0.8,\n            left: startBounds.left,\n            top: startBounds.top,\n            width: startBounds.width,\n            height: startBounds.height,\n            ease: 'power2.inOut',\n          },\n          0 // Start at the same time as popup fade\n        );\n      } catch (error) {\n        console.error('Error during closing animation:', error);\n        popup.style.display = 'none';\n        if (image) {\n          image.style.opacity = '1';\n          image.style.visibility = 'visible';\n        }\n        // Re-enable body scrolling on error\n        document.body.style.overflow = '';\n        isAnimating = false;\n      }\n    });\n  });\n};\n", "import { scrollPanel, team } from './components';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  scrollPanel();\n  team();\n});\n"],
  "mappings": "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",
  "names": ["panels"]
}
